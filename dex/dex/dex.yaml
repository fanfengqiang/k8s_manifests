apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex # This is created below
      containers:
      - image: quay.io/dexidp/dex:v2.10.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

        ports:
        - name: https
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg

      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: kube-system
data:
  config.yaml: |
    issuer: https://dex.5ik8s.com
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      http: 0.0.0.0:5556
    logger:
      level: "debug"
      format: text
    
    connectors:
      - type: ldap
        id: ldap
        name: LDAP
        config:
          host: ldap.kube-system.svc:389
          insecureNoSSL: true
          insecureSkipVerify: true
          bindDN: cn=admin,dc=5ik8s,dc=com
          bindPW: admin
          userSearch:
            baseDN: ou=People,dc=5ik8s,dc=com
            filter: "(objectClass=posixAccount)"
            username: mail
            idAttr: uid
            emailAttr: mail
            nameAttr: uid
          groupSearch:
            baseDN: ou=Groups,dc=5ik8s,dc=com
            filter: "(objectClass=posixGroup)"
            userAttr: uid
            groupAttr: memberUid
            nameAttr: cn
    oauth2:
      skipApprovalScreen: true
    staticClients:
    - id: loginapp
      redirectURIs:
      - 'https://loginapp.5ik8s.com/callback'
      name: 'Kubernetes Auth'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0
    - id: kubernetes
      name: Kubernetes
      redirectURIs:
      - http://localhost:8000
      - http://localhost:18000
      secret: YOUR_DEX_CLIENT_SECRET
    - id: example-app
      redirectURIs:
      - 'http://127.0.0.1:5555/callback'
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0

---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: kube-system
spec:
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
  selector:
    app: dex
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: kube-system  # The namespace dex is running in
